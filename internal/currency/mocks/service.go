// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	context "context"
	currency "currencies/internal/currency"
	types "currencies/internal/currency/types"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRateService is a mock of RateService interface.
type MockRateService struct {
	ctrl     *gomock.Controller
	recorder *MockRateServiceMockRecorder
}

// MockRateServiceMockRecorder is the mock recorder for MockRateService.
type MockRateServiceMockRecorder struct {
	mock *MockRateService
}

// NewMockRateService creates a new mock instance.
func NewMockRateService(ctrl *gomock.Controller) *MockRateService {
	mock := &MockRateService{ctrl: ctrl}
	mock.recorder = &MockRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateService) EXPECT() *MockRateServiceMockRecorder {
	return m.recorder
}

// GetCurrencyRateById mocks base method.
func (m *MockRateService) GetCurrencyRateById(ctx context.Context, currencyRateId uuid.UUID) (types.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRateById", ctx, currencyRateId)
	ret0, _ := ret[0].(types.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRateById indicates an expected call of GetCurrencyRateById.
func (mr *MockRateServiceMockRecorder) GetCurrencyRateById(ctx, currencyRateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRateById", reflect.TypeOf((*MockRateService)(nil).GetCurrencyRateById), ctx, currencyRateId)
}

// GetLastCurrencyRate mocks base method.
func (m *MockRateService) GetLastCurrencyRate(ctx context.Context, base, target types.Currency) (types.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCurrencyRate", ctx, base, target)
	ret0, _ := ret[0].(types.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCurrencyRate indicates an expected call of GetLastCurrencyRate.
func (mr *MockRateServiceMockRecorder) GetLastCurrencyRate(ctx, base, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCurrencyRate", reflect.TypeOf((*MockRateService)(nil).GetLastCurrencyRate), ctx, base, target)
}

// NewCurrencyRate mocks base method.
func (m *MockRateService) NewCurrencyRate(ctx context.Context, base, target types.Currency) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCurrencyRate", ctx, base, target)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCurrencyRate indicates an expected call of NewCurrencyRate.
func (mr *MockRateServiceMockRecorder) NewCurrencyRate(ctx, base, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCurrencyRate", reflect.TypeOf((*MockRateService)(nil).NewCurrencyRate), ctx, base, target)
}

// MockRateUpdaterService is a mock of RateUpdaterService interface.
type MockRateUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockRateUpdaterServiceMockRecorder
}

// MockRateUpdaterServiceMockRecorder is the mock recorder for MockRateUpdaterService.
type MockRateUpdaterServiceMockRecorder struct {
	mock *MockRateUpdaterService
}

// NewMockRateUpdaterService creates a new mock instance.
func NewMockRateUpdaterService(ctrl *gomock.Controller) *MockRateUpdaterService {
	mock := &MockRateUpdaterService{ctrl: ctrl}
	mock.recorder = &MockRateUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateUpdaterService) EXPECT() *MockRateUpdaterServiceMockRecorder {
	return m.recorder
}

// UpdateCurrencyRate mocks base method.
func (m *MockRateUpdaterService) UpdateCurrencyRate(ctx context.Context, msg types.UpdateCurrencyRateMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCurrencyRate", ctx, msg)
}

// UpdateCurrencyRate indicates an expected call of UpdateCurrencyRate.
func (mr *MockRateUpdaterServiceMockRecorder) UpdateCurrencyRate(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrencyRate", reflect.TypeOf((*MockRateUpdaterService)(nil).UpdateCurrencyRate), ctx, msg)
}

// MockUUIDGenerator is a mock of UUIDGenerator interface.
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator.
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance.
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockUUIDGenerator) Generate() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockUUIDGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockUUIDGenerator)(nil).Generate))
}

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTransactionManager) BeginTx(ctx context.Context, txOptions *sql.TxOptions, f func(context.Context, currency.Transaction) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTransactionManagerMockRecorder) BeginTx(ctx, txOptions, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactionManager)(nil).BeginTx), ctx, txOptions, f)
}
