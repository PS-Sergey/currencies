// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	currency "currencies/internal/currency"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// TxRateRepository mocks base method.
func (m *MockTransaction) TxRateRepository() currency.RateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxRateRepository")
	ret0, _ := ret[0].(currency.RateRepository)
	return ret0
}

// TxRateRepository indicates an expected call of TxRateRepository.
func (mr *MockTransactionMockRecorder) TxRateRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxRateRepository", reflect.TypeOf((*MockTransaction)(nil).TxRateRepository))
}
