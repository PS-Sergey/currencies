// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	context "context"
	types "currencies/internal/currency/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRateRepository is a mock of RateRepository interface.
type MockRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepositoryMockRecorder
}

// MockRateRepositoryMockRecorder is the mock recorder for MockRateRepository.
type MockRateRepositoryMockRecorder struct {
	mock *MockRateRepository
}

// NewMockRateRepository creates a new mock instance.
func NewMockRateRepository(ctrl *gomock.Controller) *MockRateRepository {
	mock := &MockRateRepository{ctrl: ctrl}
	mock.recorder = &MockRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateRepository) EXPECT() *MockRateRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyRateById mocks base method.
func (m *MockRateRepository) GetCurrencyRateById(ctx context.Context, id uuid.UUID) (types.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRateById", ctx, id)
	ret0, _ := ret[0].(types.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRateById indicates an expected call of GetCurrencyRateById.
func (mr *MockRateRepositoryMockRecorder) GetCurrencyRateById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRateById", reflect.TypeOf((*MockRateRepository)(nil).GetCurrencyRateById), ctx, id)
}

// GetLastCurrencyRate mocks base method.
func (m *MockRateRepository) GetLastCurrencyRate(ctx context.Context, current, target types.Currency) (types.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCurrencyRate", ctx, current, target)
	ret0, _ := ret[0].(types.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCurrencyRate indicates an expected call of GetLastCurrencyRate.
func (mr *MockRateRepositoryMockRecorder) GetLastCurrencyRate(ctx, current, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCurrencyRate", reflect.TypeOf((*MockRateRepository)(nil).GetLastCurrencyRate), ctx, current, target)
}

// SaveCurrencyRate mocks base method.
func (m *MockRateRepository) SaveCurrencyRate(ctx context.Context, rate types.CurrencyRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCurrencyRate", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCurrencyRate indicates an expected call of SaveCurrencyRate.
func (mr *MockRateRepositoryMockRecorder) SaveCurrencyRate(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCurrencyRate", reflect.TypeOf((*MockRateRepository)(nil).SaveCurrencyRate), ctx, rate)
}

// UpdateCurrencyRate mocks base method.
func (m *MockRateRepository) UpdateCurrencyRate(ctx context.Context, rate types.CurrencyRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrencyRate", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrencyRate indicates an expected call of UpdateCurrencyRate.
func (mr *MockRateRepositoryMockRecorder) UpdateCurrencyRate(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrencyRate", reflect.TypeOf((*MockRateRepository)(nil).UpdateCurrencyRate), ctx, rate)
}
